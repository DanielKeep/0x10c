
                    ; Since it's kind of hard to let the user know if
                    ; something's gone wrong without a screen, we'll provide
                    ; default screen routines.
                    ;
                    ; These are for a "basic" subset of the LEM1802: it assumes
                    ; the screen is mapped to 0x8000 and is 32x12 with 16-bit
                    ; cells with a 7-bit ASCII-ish font.
                    ;
                    ; The display driver loaded later on can either build on top
                    ; of these routines (leaving the screen where it is) or
                    ; replace them entirely.

.equ SCR_BASE       0x8000
.equ SCR_FONT       0x8180
.equ SCR_WIDTH      32
.equ SCR_HEIGHT     12
.equ SCR_GEOMETRY   (SCR_WIDTH << 8) | SCR_HEIGHT
.equ SCR_CELLS      SCR_WIDTH * SCR_HEIGHT

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; scr_init(A = device id, B = cursor, C = format) -> -
                    ;
                    ; Initialises the screen stuff.
                    ;

:scr_init           set [scr_id], a
                    set [scr_cur], b
                    set [scr_format], c

                    set pc, pop

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; scr_putpsz(A = string) -> -
                    ;
                    ; Writes a packed, zero-terminated string to the screen.
                    ; This function will interpret newlines and print everything
                    ; else.
                    ;

:scr_putpsz         ; A = current screen address / offset
                    ; B = format
                    ; C = message
                    ; I = character
                    set push, i

                    set c, a
                    set a, [scr_cur]
                    add a, SCR_BASE

                    set b, [scr_format]

                    ; Put high character
:.next_word         set i, [c]
                    shr i, 8
                    and i, 0x7f

                    ife i, 0
                        set pc, .return
                    ife i, '\n'
                        set pc, .nl_h

                    bor i, b
                    set [a], i

                    ; Put low character
:.next_l            jsr .adv
                    set i, [c]
                    and i, 0x7f

                    ife i, 0
                        set pc, .return
                    ife i, '\n'
                        set pc, .nl_l

                    bor i, b
                    set [a], i

:.next_h            jsr .adv
                    add c, 1
                    set pc, .next_word

                    ; High newline
:.nl_h              jsr .nl
                    set pc, .next_l

                    ; Low newline
:.nl_l              jsr .nl
                    set pc, .next_h

                    ; Common newline code for either
:.nl                sub a, SCR_BASE
                    jsr scr_nl_from_PrBC
                    add a, SCR_BASE

                    ; Sub one because the very next thing we do is a++.
                    sub a, 1
                    set pc, pop

                    ; Calls scr_advance_from.  Note that we're calling a
                    ; variant that explicitly preserves B and C.
:.adv               sub a, SCR_BASE ; adjust back to raw offset
                    jsr scr_advance_from_PrBC ; A = new offset
                    add a, SCR_BASE ; adjust back to address
                    set pc, pop

                    ; Done
:.return            set [scr_cur], a
                    set i, pop
                    set pc, pop

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; scr_advance_from(A = current offset) -> A = new offset
                    ;
                    ; Advances the given cursor to the next position, scrolling
                    ; the screen if necessary.  Note that this ignores the
                    ; current value of scr_cursor.
                    ;

:scr_advance_from_PrBC
                    add a, 1

                    ; If we are now at SCR_BASE + 32*12, we need to scroll the
                    ; screen up one line and subtract 32 from the cursor.
                    ifn a, 32*12
                        set pc, pop

                    set push, b
                    set push, c
                    jsr scr_scroll_up
                    set c, pop
                    set b, pop
                    sub a, 32
                    set pc, pop

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; scr_nl_from(A = current offset) -> A = new offset
                    ;
                    ; Moves the current screen cursor to the next line.
                    ;

:scr_nl_from_PrBC   and a, 0xFFE0
                    add a, 32
                    ifl a, 32*12
                        set pc, pop

                    ; Need to scroll up.
                    set push, b
                    set push, c
                    jsr scr_scroll_up
                    set c, pop
                    set b, pop
                    set a, 32*11
                    set pc, pop

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; scr_scroll_up() -> -
                    ;
                    ; Scrolls all lines on screen up by one.
                    ;

:scr_scroll_up      ; We can do this by doing a memcpy from 0x8000+32 to
                    ; 0x8000, length 32*11; then, we memset 0x8000+32*11.
                    set a, SCR_BASE
                    set b, SCR_BASE+32
                    set c, 32*11
                    jsr memcpy

                    set a, SCR_BASE+32*11
                    set b, 0
                    set c, 32
                    jsr memset

                    set pc, pop

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; Variables.
                    ;

:scr_id             dat 0xffff
:scr_cur            dat 0
:scr_format         dat 0xf000

                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                    ;
                    ; Static data.
                    ;
